#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="projektbd_samochody")]
	public partial class DealershipDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessory(Accessory instance);
    partial void UpdateAccessory(Accessory instance);
    partial void DeleteAccessory(Accessory instance);
    partial void InsertAccessories_Install_Order(Accessories_Install_Order instance);
    partial void UpdateAccessories_Install_Order(Accessories_Install_Order instance);
    partial void DeleteAccessories_Install_Order(Accessories_Install_Order instance);
    partial void InsertAccessories_Type(Accessories_Type instance);
    partial void UpdateAccessories_Type(Accessories_Type instance);
    partial void DeleteAccessories_Type(Accessories_Type instance);
    partial void InsertActive_Discount(Active_Discount instance);
    partial void UpdateActive_Discount(Active_Discount instance);
    partial void DeleteActive_Discount(Active_Discount instance);
    partial void InsertActive_Order(Active_Order instance);
    partial void UpdateActive_Order(Active_Order instance);
    partial void DeleteActive_Order(Active_Order instance);
    partial void InsertCars_for_Sale(Cars_for_Sale instance);
    partial void UpdateCars_for_Sale(Cars_for_Sale instance);
    partial void DeleteCars_for_Sale(Cars_for_Sale instance);
    partial void InsertColor(Color instance);
    partial void UpdateColor(Color instance);
    partial void DeleteColor(Color instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertDealership(Dealership instance);
    partial void UpdateDealership(Dealership instance);
    partial void DeleteDealership(Dealership instance);
    partial void InsertDiscount(Discount instance);
    partial void UpdateDiscount(Discount instance);
    partial void DeleteDiscount(Discount instance);
    partial void InsertModel(Model instance);
    partial void UpdateModel(Model instance);
    partial void DeleteModel(Model instance);
    partial void InsertOrder_Statuse(Order_Statuse instance);
    partial void UpdateOrder_Statuse(Order_Statuse instance);
    partial void DeleteOrder_Statuse(Order_Statuse instance);
    partial void InsertSold_Accessory(Sold_Accessory instance);
    partial void UpdateSold_Accessory(Sold_Accessory instance);
    partial void DeleteSold_Accessory(Sold_Accessory instance);
    partial void InsertSold_Discount(Sold_Discount instance);
    partial void UpdateSold_Discount(Sold_Discount instance);
    partial void DeleteSold_Discount(Sold_Discount instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertMounted_Accessory(Mounted_Accessory instance);
    partial void UpdateMounted_Accessory(Mounted_Accessory instance);
    partial void DeleteMounted_Accessory(Mounted_Accessory instance);
    partial void InsertSold_Car(Sold_Car instance);
    partial void UpdateSold_Car(Sold_Car instance);
    partial void DeleteSold_Car(Sold_Car instance);
    #endregion
		
		public DealershipDatabaseDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.projektbd_samochodyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DealershipDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DealershipDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DealershipDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DealershipDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Accessory> Accessories
		{
			get
			{
				return this.GetTable<Accessory>();
			}
		}
		
		public System.Data.Linq.Table<Accessories_Install_Order> Accessories_Install_Orders
		{
			get
			{
				return this.GetTable<Accessories_Install_Order>();
			}
		}
		
		public System.Data.Linq.Table<Accessories_Type> Accessories_Types
		{
			get
			{
				return this.GetTable<Accessories_Type>();
			}
		}
		
		public System.Data.Linq.Table<Active_Discount> Active_Discounts
		{
			get
			{
				return this.GetTable<Active_Discount>();
			}
		}
		
		public System.Data.Linq.Table<Active_Order> Active_Orders
		{
			get
			{
				return this.GetTable<Active_Order>();
			}
		}
		
		public System.Data.Linq.Table<Cars_for_Sale> Cars_for_Sales
		{
			get
			{
				return this.GetTable<Cars_for_Sale>();
			}
		}
		
		public System.Data.Linq.Table<Color> Colors
		{
			get
			{
				return this.GetTable<Color>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Dealership> Dealerships
		{
			get
			{
				return this.GetTable<Dealership>();
			}
		}
		
		public System.Data.Linq.Table<Discount> Discounts
		{
			get
			{
				return this.GetTable<Discount>();
			}
		}
		
		public System.Data.Linq.Table<Model> Models
		{
			get
			{
				return this.GetTable<Model>();
			}
		}
		
		public System.Data.Linq.Table<Order_Statuse> Order_Statuses
		{
			get
			{
				return this.GetTable<Order_Statuse>();
			}
		}
		
		public System.Data.Linq.Table<Sold_Accessory> Sold_Accessories
		{
			get
			{
				return this.GetTable<Sold_Accessory>();
			}
		}
		
		public System.Data.Linq.Table<Sold_Discount> Sold_Discounts
		{
			get
			{
				return this.GetTable<Sold_Discount>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Mounted_Accessory> Mounted_Accessories
		{
			get
			{
				return this.GetTable<Mounted_Accessory>();
			}
		}
		
		public System.Data.Linq.Table<Sold_Car> Sold_Cars
		{
			get
			{
				return this.GetTable<Sold_Car>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accessories")]
	public partial class Accessory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ACCESSORY_ID;
		
		private int _TYPE_ID;
		
		private string _NAME;
		
		private decimal _PRICE;
		
		private EntitySet<Accessories_Install_Order> _Accessories_Install_Orders;
		
		private EntitySet<Sold_Accessory> _Sold_Accessories;
		
		private EntitySet<Mounted_Accessory> _Mounted_Accessories;
		
		private EntityRef<Accessories_Type> _Accessories_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACCESSORY_IDChanging(int value);
    partial void OnACCESSORY_IDChanged();
    partial void OnTYPE_IDChanging(int value);
    partial void OnTYPE_IDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnPRICEChanging(decimal value);
    partial void OnPRICEChanged();
    #endregion
		
		public Accessory()
		{
			this._Accessories_Install_Orders = new EntitySet<Accessories_Install_Order>(new Action<Accessories_Install_Order>(this.attach_Accessories_Install_Orders), new Action<Accessories_Install_Order>(this.detach_Accessories_Install_Orders));
			this._Sold_Accessories = new EntitySet<Sold_Accessory>(new Action<Sold_Accessory>(this.attach_Sold_Accessories), new Action<Sold_Accessory>(this.detach_Sold_Accessories));
			this._Mounted_Accessories = new EntitySet<Mounted_Accessory>(new Action<Mounted_Accessory>(this.attach_Mounted_Accessories), new Action<Mounted_Accessory>(this.detach_Mounted_Accessories));
			this._Accessories_Type = default(EntityRef<Accessories_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCESSORY_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ACCESSORY_ID
		{
			get
			{
				return this._ACCESSORY_ID;
			}
			set
			{
				if ((this._ACCESSORY_ID != value))
				{
					this.OnACCESSORY_IDChanging(value);
					this.SendPropertyChanging();
					this._ACCESSORY_ID = value;
					this.SendPropertyChanged("ACCESSORY_ID");
					this.OnACCESSORY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPE_ID", DbType="Int NOT NULL")]
		public int TYPE_ID
		{
			get
			{
				return this._TYPE_ID;
			}
			set
			{
				if ((this._TYPE_ID != value))
				{
					if (this._Accessories_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTYPE_IDChanging(value);
					this.SendPropertyChanging();
					this._TYPE_ID = value;
					this.SendPropertyChanged("TYPE_ID");
					this.OnTYPE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRICE", DbType="Decimal(10,2) NOT NULL")]
		public decimal PRICE
		{
			get
			{
				return this._PRICE;
			}
			set
			{
				if ((this._PRICE != value))
				{
					this.OnPRICEChanging(value);
					this.SendPropertyChanging();
					this._PRICE = value;
					this.SendPropertyChanged("PRICE");
					this.OnPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accessory_Accessories_Install_Order", Storage="_Accessories_Install_Orders", ThisKey="ACCESSORY_ID", OtherKey="ACCESSORY_ID")]
		public EntitySet<Accessories_Install_Order> Accessories_Install_Orders
		{
			get
			{
				return this._Accessories_Install_Orders;
			}
			set
			{
				this._Accessories_Install_Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accessory_Sold_Accessory", Storage="_Sold_Accessories", ThisKey="ACCESSORY_ID", OtherKey="ACCESSORY_ID")]
		public EntitySet<Sold_Accessory> Sold_Accessories
		{
			get
			{
				return this._Sold_Accessories;
			}
			set
			{
				this._Sold_Accessories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accessory_Mounted_Accessory", Storage="_Mounted_Accessories", ThisKey="ACCESSORY_ID", OtherKey="ACCESSORY_ID")]
		public EntitySet<Mounted_Accessory> Mounted_Accessories
		{
			get
			{
				return this._Mounted_Accessories;
			}
			set
			{
				this._Mounted_Accessories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accessories_Type_Accessory", Storage="_Accessories_Type", ThisKey="TYPE_ID", OtherKey="TYPE_ID", IsForeignKey=true)]
		public Accessories_Type Accessories_Type
		{
			get
			{
				return this._Accessories_Type.Entity;
			}
			set
			{
				Accessories_Type previousValue = this._Accessories_Type.Entity;
				if (((previousValue != value) 
							|| (this._Accessories_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Accessories_Type.Entity = null;
						previousValue.Accessories.Remove(this);
					}
					this._Accessories_Type.Entity = value;
					if ((value != null))
					{
						value.Accessories.Add(this);
						this._TYPE_ID = value.TYPE_ID;
					}
					else
					{
						this._TYPE_ID = default(int);
					}
					this.SendPropertyChanged("Accessories_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accessories_Install_Orders(Accessories_Install_Order entity)
		{
			this.SendPropertyChanging();
			entity.Accessory = this;
		}
		
		private void detach_Accessories_Install_Orders(Accessories_Install_Order entity)
		{
			this.SendPropertyChanging();
			entity.Accessory = null;
		}
		
		private void attach_Sold_Accessories(Sold_Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Accessory = this;
		}
		
		private void detach_Sold_Accessories(Sold_Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Accessory = null;
		}
		
		private void attach_Mounted_Accessories(Mounted_Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Accessory = this;
		}
		
		private void detach_Mounted_Accessories(Mounted_Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Accessory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accessories_Install_Orders")]
	public partial class Accessories_Install_Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ORDER_ID;
		
		private int _ACCESSORY_ID;
		
		private EntityRef<Accessory> _Accessory;
		
		private EntityRef<Active_Order> _Active_Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnORDER_IDChanging(int value);
    partial void OnORDER_IDChanged();
    partial void OnACCESSORY_IDChanging(int value);
    partial void OnACCESSORY_IDChanged();
    #endregion
		
		public Accessories_Install_Order()
		{
			this._Accessory = default(EntityRef<Accessory>);
			this._Active_Order = default(EntityRef<Active_Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ORDER_ID
		{
			get
			{
				return this._ORDER_ID;
			}
			set
			{
				if ((this._ORDER_ID != value))
				{
					if (this._Active_Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnORDER_IDChanging(value);
					this.SendPropertyChanging();
					this._ORDER_ID = value;
					this.SendPropertyChanged("ORDER_ID");
					this.OnORDER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCESSORY_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ACCESSORY_ID
		{
			get
			{
				return this._ACCESSORY_ID;
			}
			set
			{
				if ((this._ACCESSORY_ID != value))
				{
					if (this._Accessory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACCESSORY_IDChanging(value);
					this.SendPropertyChanging();
					this._ACCESSORY_ID = value;
					this.SendPropertyChanged("ACCESSORY_ID");
					this.OnACCESSORY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accessory_Accessories_Install_Order", Storage="_Accessory", ThisKey="ACCESSORY_ID", OtherKey="ACCESSORY_ID", IsForeignKey=true)]
		public Accessory Accessory
		{
			get
			{
				return this._Accessory.Entity;
			}
			set
			{
				Accessory previousValue = this._Accessory.Entity;
				if (((previousValue != value) 
							|| (this._Accessory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Accessory.Entity = null;
						previousValue.Accessories_Install_Orders.Remove(this);
					}
					this._Accessory.Entity = value;
					if ((value != null))
					{
						value.Accessories_Install_Orders.Add(this);
						this._ACCESSORY_ID = value.ACCESSORY_ID;
					}
					else
					{
						this._ACCESSORY_ID = default(int);
					}
					this.SendPropertyChanged("Accessory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Active_Order_Accessories_Install_Order", Storage="_Active_Order", ThisKey="ORDER_ID", OtherKey="ORDER_ID", IsForeignKey=true)]
		public Active_Order Active_Order
		{
			get
			{
				return this._Active_Order.Entity;
			}
			set
			{
				Active_Order previousValue = this._Active_Order.Entity;
				if (((previousValue != value) 
							|| (this._Active_Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Active_Order.Entity = null;
						previousValue.Accessories_Install_Orders.Remove(this);
					}
					this._Active_Order.Entity = value;
					if ((value != null))
					{
						value.Accessories_Install_Orders.Add(this);
						this._ORDER_ID = value.ORDER_ID;
					}
					else
					{
						this._ORDER_ID = default(int);
					}
					this.SendPropertyChanged("Active_Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accessories_Types")]
	public partial class Accessories_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TYPE_ID;
		
		private string _TYPE;
		
		private EntitySet<Accessory> _Accessories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTYPE_IDChanging(int value);
    partial void OnTYPE_IDChanged();
    partial void OnTYPEChanging(string value);
    partial void OnTYPEChanged();
    #endregion
		
		public Accessories_Type()
		{
			this._Accessories = new EntitySet<Accessory>(new Action<Accessory>(this.attach_Accessories), new Action<Accessory>(this.detach_Accessories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPE_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TYPE_ID
		{
			get
			{
				return this._TYPE_ID;
			}
			set
			{
				if ((this._TYPE_ID != value))
				{
					this.OnTYPE_IDChanging(value);
					this.SendPropertyChanging();
					this._TYPE_ID = value;
					this.SendPropertyChanged("TYPE_ID");
					this.OnTYPE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TYPE", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TYPE
		{
			get
			{
				return this._TYPE;
			}
			set
			{
				if ((this._TYPE != value))
				{
					this.OnTYPEChanging(value);
					this.SendPropertyChanging();
					this._TYPE = value;
					this.SendPropertyChanged("TYPE");
					this.OnTYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accessories_Type_Accessory", Storage="_Accessories", ThisKey="TYPE_ID", OtherKey="TYPE_ID")]
		public EntitySet<Accessory> Accessories
		{
			get
			{
				return this._Accessories;
			}
			set
			{
				this._Accessories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accessories(Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Accessories_Type = this;
		}
		
		private void detach_Accessories(Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Accessories_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Active_Discounts")]
	public partial class Active_Discount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ORDER_ID;
		
		private int _DISCOUNT_ID;
		
		private EntityRef<Active_Order> _Active_Order;
		
		private EntityRef<Discount> _Discount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnORDER_IDChanging(int value);
    partial void OnORDER_IDChanged();
    partial void OnDISCOUNT_IDChanging(int value);
    partial void OnDISCOUNT_IDChanged();
    #endregion
		
		public Active_Discount()
		{
			this._Active_Order = default(EntityRef<Active_Order>);
			this._Discount = default(EntityRef<Discount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ORDER_ID
		{
			get
			{
				return this._ORDER_ID;
			}
			set
			{
				if ((this._ORDER_ID != value))
				{
					if (this._Active_Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnORDER_IDChanging(value);
					this.SendPropertyChanging();
					this._ORDER_ID = value;
					this.SendPropertyChanged("ORDER_ID");
					this.OnORDER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISCOUNT_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DISCOUNT_ID
		{
			get
			{
				return this._DISCOUNT_ID;
			}
			set
			{
				if ((this._DISCOUNT_ID != value))
				{
					if (this._Discount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDISCOUNT_IDChanging(value);
					this.SendPropertyChanging();
					this._DISCOUNT_ID = value;
					this.SendPropertyChanged("DISCOUNT_ID");
					this.OnDISCOUNT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Active_Order_Active_Discount", Storage="_Active_Order", ThisKey="ORDER_ID", OtherKey="ORDER_ID", IsForeignKey=true)]
		public Active_Order Active_Order
		{
			get
			{
				return this._Active_Order.Entity;
			}
			set
			{
				Active_Order previousValue = this._Active_Order.Entity;
				if (((previousValue != value) 
							|| (this._Active_Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Active_Order.Entity = null;
						previousValue.Active_Discounts.Remove(this);
					}
					this._Active_Order.Entity = value;
					if ((value != null))
					{
						value.Active_Discounts.Add(this);
						this._ORDER_ID = value.ORDER_ID;
					}
					else
					{
						this._ORDER_ID = default(int);
					}
					this.SendPropertyChanged("Active_Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_Active_Discount", Storage="_Discount", ThisKey="DISCOUNT_ID", OtherKey="DISCOUNT_ID", IsForeignKey=true)]
		public Discount Discount
		{
			get
			{
				return this._Discount.Entity;
			}
			set
			{
				Discount previousValue = this._Discount.Entity;
				if (((previousValue != value) 
							|| (this._Discount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discount.Entity = null;
						previousValue.Active_Discounts.Remove(this);
					}
					this._Discount.Entity = value;
					if ((value != null))
					{
						value.Active_Discounts.Add(this);
						this._DISCOUNT_ID = value.DISCOUNT_ID;
					}
					else
					{
						this._DISCOUNT_ID = default(int);
					}
					this.SendPropertyChanged("Discount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Active_Orders")]
	public partial class Active_Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ORDER_ID;
		
		private string _CAR_VIN;
		
		private int _CUSTOMER_ID;
		
		private int _EMPLOYEE_ID;
		
		private int _ORDER_STATUS_ID;
		
		private string _NOTES;
		
		private System.DateTime _OPENED_DATE;
		
		private System.DateTime _LAST_UPDATE;
		
		private EntitySet<Accessories_Install_Order> _Accessories_Install_Orders;
		
		private EntitySet<Active_Discount> _Active_Discounts;
		
		private EntityRef<Cars_for_Sale> _Cars_for_Sale;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Order_Statuse> _Order_Statuse;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnORDER_IDChanging(int value);
    partial void OnORDER_IDChanged();
    partial void OnCAR_VINChanging(string value);
    partial void OnCAR_VINChanged();
    partial void OnCUSTOMER_IDChanging(int value);
    partial void OnCUSTOMER_IDChanged();
    partial void OnEMPLOYEE_IDChanging(int value);
    partial void OnEMPLOYEE_IDChanged();
    partial void OnORDER_STATUS_IDChanging(int value);
    partial void OnORDER_STATUS_IDChanged();
    partial void OnNOTESChanging(string value);
    partial void OnNOTESChanged();
    partial void OnOPENED_DATEChanging(System.DateTime value);
    partial void OnOPENED_DATEChanged();
    partial void OnLAST_UPDATEChanging(System.DateTime value);
    partial void OnLAST_UPDATEChanged();
    #endregion
		
		public Active_Order()
		{
			this._Accessories_Install_Orders = new EntitySet<Accessories_Install_Order>(new Action<Accessories_Install_Order>(this.attach_Accessories_Install_Orders), new Action<Accessories_Install_Order>(this.detach_Accessories_Install_Orders));
			this._Active_Discounts = new EntitySet<Active_Discount>(new Action<Active_Discount>(this.attach_Active_Discounts), new Action<Active_Discount>(this.detach_Active_Discounts));
			this._Cars_for_Sale = default(EntityRef<Cars_for_Sale>);
			this._Customer = default(EntityRef<Customer>);
			this._Order_Statuse = default(EntityRef<Order_Statuse>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ORDER_ID
		{
			get
			{
				return this._ORDER_ID;
			}
			set
			{
				if ((this._ORDER_ID != value))
				{
					this.OnORDER_IDChanging(value);
					this.SendPropertyChanging();
					this._ORDER_ID = value;
					this.SendPropertyChanged("ORDER_ID");
					this.OnORDER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAR_VIN", DbType="Char(17) NOT NULL", CanBeNull=false)]
		public string CAR_VIN
		{
			get
			{
				return this._CAR_VIN;
			}
			set
			{
				if ((this._CAR_VIN != value))
				{
					if (this._Cars_for_Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCAR_VINChanging(value);
					this.SendPropertyChanging();
					this._CAR_VIN = value;
					this.SendPropertyChanged("CAR_VIN");
					this.OnCAR_VINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUSTOMER_ID", DbType="Int NOT NULL")]
		public int CUSTOMER_ID
		{
			get
			{
				return this._CUSTOMER_ID;
			}
			set
			{
				if ((this._CUSTOMER_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCUSTOMER_IDChanging(value);
					this.SendPropertyChanging();
					this._CUSTOMER_ID = value;
					this.SendPropertyChanged("CUSTOMER_ID");
					this.OnCUSTOMER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEE_ID", DbType="Int NOT NULL")]
		public int EMPLOYEE_ID
		{
			get
			{
				return this._EMPLOYEE_ID;
			}
			set
			{
				if ((this._EMPLOYEE_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMPLOYEE_IDChanging(value);
					this.SendPropertyChanging();
					this._EMPLOYEE_ID = value;
					this.SendPropertyChanged("EMPLOYEE_ID");
					this.OnEMPLOYEE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_STATUS_ID", DbType="Int NOT NULL")]
		public int ORDER_STATUS_ID
		{
			get
			{
				return this._ORDER_STATUS_ID;
			}
			set
			{
				if ((this._ORDER_STATUS_ID != value))
				{
					if (this._Order_Statuse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnORDER_STATUS_IDChanging(value);
					this.SendPropertyChanging();
					this._ORDER_STATUS_ID = value;
					this.SendPropertyChanged("ORDER_STATUS_ID");
					this.OnORDER_STATUS_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NOTES", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string NOTES
		{
			get
			{
				return this._NOTES;
			}
			set
			{
				if ((this._NOTES != value))
				{
					this.OnNOTESChanging(value);
					this.SendPropertyChanging();
					this._NOTES = value;
					this.SendPropertyChanged("NOTES");
					this.OnNOTESChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPENED_DATE", DbType="Date NOT NULL")]
		public System.DateTime OPENED_DATE
		{
			get
			{
				return this._OPENED_DATE;
			}
			set
			{
				if ((this._OPENED_DATE != value))
				{
					this.OnOPENED_DATEChanging(value);
					this.SendPropertyChanging();
					this._OPENED_DATE = value;
					this.SendPropertyChanged("OPENED_DATE");
					this.OnOPENED_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAST_UPDATE", DbType="DateTime NOT NULL")]
		public System.DateTime LAST_UPDATE
		{
			get
			{
				return this._LAST_UPDATE;
			}
			set
			{
				if ((this._LAST_UPDATE != value))
				{
					this.OnLAST_UPDATEChanging(value);
					this.SendPropertyChanging();
					this._LAST_UPDATE = value;
					this.SendPropertyChanged("LAST_UPDATE");
					this.OnLAST_UPDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Active_Order_Accessories_Install_Order", Storage="_Accessories_Install_Orders", ThisKey="ORDER_ID", OtherKey="ORDER_ID")]
		public EntitySet<Accessories_Install_Order> Accessories_Install_Orders
		{
			get
			{
				return this._Accessories_Install_Orders;
			}
			set
			{
				this._Accessories_Install_Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Active_Order_Active_Discount", Storage="_Active_Discounts", ThisKey="ORDER_ID", OtherKey="ORDER_ID")]
		public EntitySet<Active_Discount> Active_Discounts
		{
			get
			{
				return this._Active_Discounts;
			}
			set
			{
				this._Active_Discounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_for_Sale_Active_Order", Storage="_Cars_for_Sale", ThisKey="CAR_VIN", OtherKey="CAR_VIN", IsForeignKey=true)]
		public Cars_for_Sale Cars_for_Sale
		{
			get
			{
				return this._Cars_for_Sale.Entity;
			}
			set
			{
				Cars_for_Sale previousValue = this._Cars_for_Sale.Entity;
				if (((previousValue != value) 
							|| (this._Cars_for_Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cars_for_Sale.Entity = null;
						previousValue.Active_Orders.Remove(this);
					}
					this._Cars_for_Sale.Entity = value;
					if ((value != null))
					{
						value.Active_Orders.Add(this);
						this._CAR_VIN = value.CAR_VIN;
					}
					else
					{
						this._CAR_VIN = default(string);
					}
					this.SendPropertyChanged("Cars_for_Sale");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Active_Order", Storage="_Customer", ThisKey="CUSTOMER_ID", OtherKey="CUSTOMER_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Active_Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Active_Orders.Add(this);
						this._CUSTOMER_ID = value.CUSTOMER_ID;
					}
					else
					{
						this._CUSTOMER_ID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Statuse_Active_Order", Storage="_Order_Statuse", ThisKey="ORDER_STATUS_ID", OtherKey="ORDER_STATUS_ID", IsForeignKey=true)]
		public Order_Statuse Order_Statuse
		{
			get
			{
				return this._Order_Statuse.Entity;
			}
			set
			{
				Order_Statuse previousValue = this._Order_Statuse.Entity;
				if (((previousValue != value) 
							|| (this._Order_Statuse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order_Statuse.Entity = null;
						previousValue.Active_Orders.Remove(this);
					}
					this._Order_Statuse.Entity = value;
					if ((value != null))
					{
						value.Active_Orders.Add(this);
						this._ORDER_STATUS_ID = value.ORDER_STATUS_ID;
					}
					else
					{
						this._ORDER_STATUS_ID = default(int);
					}
					this.SendPropertyChanged("Order_Statuse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Active_Order", Storage="_Employee", ThisKey="EMPLOYEE_ID", OtherKey="EMPLOYEE_ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Active_Orders.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Active_Orders.Add(this);
						this._EMPLOYEE_ID = value.EMPLOYEE_ID;
					}
					else
					{
						this._EMPLOYEE_ID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accessories_Install_Orders(Accessories_Install_Order entity)
		{
			this.SendPropertyChanging();
			entity.Active_Order = this;
		}
		
		private void detach_Accessories_Install_Orders(Accessories_Install_Order entity)
		{
			this.SendPropertyChanging();
			entity.Active_Order = null;
		}
		
		private void attach_Active_Discounts(Active_Discount entity)
		{
			this.SendPropertyChanging();
			entity.Active_Order = this;
		}
		
		private void detach_Active_Discounts(Active_Discount entity)
		{
			this.SendPropertyChanging();
			entity.Active_Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars_for_Sale")]
	public partial class Cars_for_Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CAR_VIN;
		
		private int _MODEL_ID;
		
		private int _DEALERSHIP_ID;
		
		private int _COLOR_ID;
		
		private string _PRODUCTION_YEAR;
		
		private EntitySet<Active_Order> _Active_Orders;
		
		private EntitySet<Mounted_Accessory> _Mounted_Accessories;
		
		private EntityRef<Color> _Color;
		
		private EntityRef<Dealership> _Dealership;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCAR_VINChanging(string value);
    partial void OnCAR_VINChanged();
    partial void OnMODEL_IDChanging(int value);
    partial void OnMODEL_IDChanged();
    partial void OnDEALERSHIP_IDChanging(int value);
    partial void OnDEALERSHIP_IDChanged();
    partial void OnCOLOR_IDChanging(int value);
    partial void OnCOLOR_IDChanged();
    partial void OnPRODUCTION_YEARChanging(string value);
    partial void OnPRODUCTION_YEARChanged();
    #endregion
		
		public Cars_for_Sale()
		{
			this._Active_Orders = new EntitySet<Active_Order>(new Action<Active_Order>(this.attach_Active_Orders), new Action<Active_Order>(this.detach_Active_Orders));
			this._Mounted_Accessories = new EntitySet<Mounted_Accessory>(new Action<Mounted_Accessory>(this.attach_Mounted_Accessories), new Action<Mounted_Accessory>(this.detach_Mounted_Accessories));
			this._Color = default(EntityRef<Color>);
			this._Dealership = default(EntityRef<Dealership>);
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAR_VIN", DbType="Char(17) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CAR_VIN
		{
			get
			{
				return this._CAR_VIN;
			}
			set
			{
				if ((this._CAR_VIN != value))
				{
					this.OnCAR_VINChanging(value);
					this.SendPropertyChanging();
					this._CAR_VIN = value;
					this.SendPropertyChanged("CAR_VIN");
					this.OnCAR_VINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MODEL_ID", DbType="Int NOT NULL")]
		public int MODEL_ID
		{
			get
			{
				return this._MODEL_ID;
			}
			set
			{
				if ((this._MODEL_ID != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMODEL_IDChanging(value);
					this.SendPropertyChanging();
					this._MODEL_ID = value;
					this.SendPropertyChanged("MODEL_ID");
					this.OnMODEL_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEALERSHIP_ID", DbType="Int NOT NULL")]
		public int DEALERSHIP_ID
		{
			get
			{
				return this._DEALERSHIP_ID;
			}
			set
			{
				if ((this._DEALERSHIP_ID != value))
				{
					if (this._Dealership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDEALERSHIP_IDChanging(value);
					this.SendPropertyChanging();
					this._DEALERSHIP_ID = value;
					this.SendPropertyChanged("DEALERSHIP_ID");
					this.OnDEALERSHIP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COLOR_ID", DbType="Int NOT NULL")]
		public int COLOR_ID
		{
			get
			{
				return this._COLOR_ID;
			}
			set
			{
				if ((this._COLOR_ID != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOLOR_IDChanging(value);
					this.SendPropertyChanging();
					this._COLOR_ID = value;
					this.SendPropertyChanged("COLOR_ID");
					this.OnCOLOR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTION_YEAR", DbType="Char(4) NOT NULL", CanBeNull=false)]
		public string PRODUCTION_YEAR
		{
			get
			{
				return this._PRODUCTION_YEAR;
			}
			set
			{
				if ((this._PRODUCTION_YEAR != value))
				{
					this.OnPRODUCTION_YEARChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTION_YEAR = value;
					this.SendPropertyChanged("PRODUCTION_YEAR");
					this.OnPRODUCTION_YEARChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_for_Sale_Active_Order", Storage="_Active_Orders", ThisKey="CAR_VIN", OtherKey="CAR_VIN")]
		public EntitySet<Active_Order> Active_Orders
		{
			get
			{
				return this._Active_Orders;
			}
			set
			{
				this._Active_Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_for_Sale_Mounted_Accessory", Storage="_Mounted_Accessories", ThisKey="CAR_VIN", OtherKey="CAR_VIN")]
		public EntitySet<Mounted_Accessory> Mounted_Accessories
		{
			get
			{
				return this._Mounted_Accessories;
			}
			set
			{
				this._Mounted_Accessories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Cars_for_Sale", Storage="_Color", ThisKey="COLOR_ID", OtherKey="COLOR_ID", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.Cars_for_Sales.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.Cars_for_Sales.Add(this);
						this._COLOR_ID = value.COLOR_ID;
					}
					else
					{
						this._COLOR_ID = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dealership_Cars_for_Sale", Storage="_Dealership", ThisKey="DEALERSHIP_ID", OtherKey="DEALERSHIP_ID", IsForeignKey=true)]
		public Dealership Dealership
		{
			get
			{
				return this._Dealership.Entity;
			}
			set
			{
				Dealership previousValue = this._Dealership.Entity;
				if (((previousValue != value) 
							|| (this._Dealership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dealership.Entity = null;
						previousValue.Cars_for_Sales.Remove(this);
					}
					this._Dealership.Entity = value;
					if ((value != null))
					{
						value.Cars_for_Sales.Add(this);
						this._DEALERSHIP_ID = value.DEALERSHIP_ID;
					}
					else
					{
						this._DEALERSHIP_ID = default(int);
					}
					this.SendPropertyChanged("Dealership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Cars_for_Sale", Storage="_Model", ThisKey="MODEL_ID", OtherKey="MODEL_ID", IsForeignKey=true)]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.Cars_for_Sales.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.Cars_for_Sales.Add(this);
						this._MODEL_ID = value.MODEL_ID;
					}
					else
					{
						this._MODEL_ID = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Active_Orders(Active_Order entity)
		{
			this.SendPropertyChanging();
			entity.Cars_for_Sale = this;
		}
		
		private void detach_Active_Orders(Active_Order entity)
		{
			this.SendPropertyChanging();
			entity.Cars_for_Sale = null;
		}
		
		private void attach_Mounted_Accessories(Mounted_Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Cars_for_Sale = this;
		}
		
		private void detach_Mounted_Accessories(Mounted_Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Cars_for_Sale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Colors")]
	public partial class Color : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _COLOR_ID;
		
		private string _NAME;
		
		private EntitySet<Cars_for_Sale> _Cars_for_Sales;
		
		private EntitySet<Sold_Car> _Sold_Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCOLOR_IDChanging(int value);
    partial void OnCOLOR_IDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public Color()
		{
			this._Cars_for_Sales = new EntitySet<Cars_for_Sale>(new Action<Cars_for_Sale>(this.attach_Cars_for_Sales), new Action<Cars_for_Sale>(this.detach_Cars_for_Sales));
			this._Sold_Cars = new EntitySet<Sold_Car>(new Action<Sold_Car>(this.attach_Sold_Cars), new Action<Sold_Car>(this.detach_Sold_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COLOR_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int COLOR_ID
		{
			get
			{
				return this._COLOR_ID;
			}
			set
			{
				if ((this._COLOR_ID != value))
				{
					this.OnCOLOR_IDChanging(value);
					this.SendPropertyChanging();
					this._COLOR_ID = value;
					this.SendPropertyChanged("COLOR_ID");
					this.OnCOLOR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Cars_for_Sale", Storage="_Cars_for_Sales", ThisKey="COLOR_ID", OtherKey="COLOR_ID")]
		public EntitySet<Cars_for_Sale> Cars_for_Sales
		{
			get
			{
				return this._Cars_for_Sales;
			}
			set
			{
				this._Cars_for_Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Sold_Car", Storage="_Sold_Cars", ThisKey="COLOR_ID", OtherKey="COLOR_ID")]
		public EntitySet<Sold_Car> Sold_Cars
		{
			get
			{
				return this._Sold_Cars;
			}
			set
			{
				this._Sold_Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars_for_Sales(Cars_for_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_Cars_for_Sales(Cars_for_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
		
		private void attach_Sold_Cars(Sold_Car entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_Sold_Cars(Sold_Car entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CUSTOMER_ID;
		
		private string _NAME;
		
		private string _STREET_ADDRESS;
		
		private string _CITY;
		
		private string _ZIPCODE;
		
		private string _PHONE;
		
		private string _MAIL;
		
		private EntitySet<Active_Order> _Active_Orders;
		
		private EntitySet<Sold_Car> _Sold_Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCUSTOMER_IDChanging(int value);
    partial void OnCUSTOMER_IDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnSTREET_ADDRESSChanging(string value);
    partial void OnSTREET_ADDRESSChanged();
    partial void OnCITYChanging(string value);
    partial void OnCITYChanged();
    partial void OnZIPCODEChanging(string value);
    partial void OnZIPCODEChanged();
    partial void OnPHONEChanging(string value);
    partial void OnPHONEChanged();
    partial void OnMAILChanging(string value);
    partial void OnMAILChanged();
    #endregion
		
		public Customer()
		{
			this._Active_Orders = new EntitySet<Active_Order>(new Action<Active_Order>(this.attach_Active_Orders), new Action<Active_Order>(this.detach_Active_Orders));
			this._Sold_Cars = new EntitySet<Sold_Car>(new Action<Sold_Car>(this.attach_Sold_Cars), new Action<Sold_Car>(this.detach_Sold_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUSTOMER_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CUSTOMER_ID
		{
			get
			{
				return this._CUSTOMER_ID;
			}
			set
			{
				if ((this._CUSTOMER_ID != value))
				{
					this.OnCUSTOMER_IDChanging(value);
					this.SendPropertyChanging();
					this._CUSTOMER_ID = value;
					this.SendPropertyChanged("CUSTOMER_ID");
					this.OnCUSTOMER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STREET_ADDRESS", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string STREET_ADDRESS
		{
			get
			{
				return this._STREET_ADDRESS;
			}
			set
			{
				if ((this._STREET_ADDRESS != value))
				{
					this.OnSTREET_ADDRESSChanging(value);
					this.SendPropertyChanging();
					this._STREET_ADDRESS = value;
					this.SendPropertyChanged("STREET_ADDRESS");
					this.OnSTREET_ADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CITY
		{
			get
			{
				return this._CITY;
			}
			set
			{
				if ((this._CITY != value))
				{
					this.OnCITYChanging(value);
					this.SendPropertyChanging();
					this._CITY = value;
					this.SendPropertyChanged("CITY");
					this.OnCITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIPCODE", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string ZIPCODE
		{
			get
			{
				return this._ZIPCODE;
			}
			set
			{
				if ((this._ZIPCODE != value))
				{
					this.OnZIPCODEChanging(value);
					this.SendPropertyChanging();
					this._ZIPCODE = value;
					this.SendPropertyChanged("ZIPCODE");
					this.OnZIPCODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHONE", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string PHONE
		{
			get
			{
				return this._PHONE;
			}
			set
			{
				if ((this._PHONE != value))
				{
					this.OnPHONEChanging(value);
					this.SendPropertyChanging();
					this._PHONE = value;
					this.SendPropertyChanged("PHONE");
					this.OnPHONEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAIL", DbType="NVarChar(50)")]
		public string MAIL
		{
			get
			{
				return this._MAIL;
			}
			set
			{
				if ((this._MAIL != value))
				{
					this.OnMAILChanging(value);
					this.SendPropertyChanging();
					this._MAIL = value;
					this.SendPropertyChanged("MAIL");
					this.OnMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Active_Order", Storage="_Active_Orders", ThisKey="CUSTOMER_ID", OtherKey="CUSTOMER_ID")]
		public EntitySet<Active_Order> Active_Orders
		{
			get
			{
				return this._Active_Orders;
			}
			set
			{
				this._Active_Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sold_Car", Storage="_Sold_Cars", ThisKey="CUSTOMER_ID", OtherKey="CUSTOMER_ID")]
		public EntitySet<Sold_Car> Sold_Cars
		{
			get
			{
				return this._Sold_Cars;
			}
			set
			{
				this._Sold_Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Active_Orders(Active_Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Active_Orders(Active_Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Sold_Cars(Sold_Car entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Sold_Cars(Sold_Car entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dealerships")]
	public partial class Dealership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DEALERSHIP_ID;
		
		private System.Nullable<int> _MANAGER_ID;
		
		private string _STREET_ADDRESS;
		
		private string _CITY;
		
		private string _ZIPCODE;
		
		private EntitySet<Cars_for_Sale> _Cars_for_Sales;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Sold_Car> _Sold_Cars;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDEALERSHIP_IDChanging(int value);
    partial void OnDEALERSHIP_IDChanged();
    partial void OnMANAGER_IDChanging(System.Nullable<int> value);
    partial void OnMANAGER_IDChanged();
    partial void OnSTREET_ADDRESSChanging(string value);
    partial void OnSTREET_ADDRESSChanged();
    partial void OnCITYChanging(string value);
    partial void OnCITYChanged();
    partial void OnZIPCODEChanging(string value);
    partial void OnZIPCODEChanged();
    #endregion
		
		public Dealership()
		{
			this._Cars_for_Sales = new EntitySet<Cars_for_Sale>(new Action<Cars_for_Sale>(this.attach_Cars_for_Sales), new Action<Cars_for_Sale>(this.detach_Cars_for_Sales));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Sold_Cars = new EntitySet<Sold_Car>(new Action<Sold_Car>(this.attach_Sold_Cars), new Action<Sold_Car>(this.detach_Sold_Cars));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEALERSHIP_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DEALERSHIP_ID
		{
			get
			{
				return this._DEALERSHIP_ID;
			}
			set
			{
				if ((this._DEALERSHIP_ID != value))
				{
					this.OnDEALERSHIP_IDChanging(value);
					this.SendPropertyChanging();
					this._DEALERSHIP_ID = value;
					this.SendPropertyChanged("DEALERSHIP_ID");
					this.OnDEALERSHIP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MANAGER_ID", DbType="Int")]
		public System.Nullable<int> MANAGER_ID
		{
			get
			{
				return this._MANAGER_ID;
			}
			set
			{
				if ((this._MANAGER_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMANAGER_IDChanging(value);
					this.SendPropertyChanging();
					this._MANAGER_ID = value;
					this.SendPropertyChanged("MANAGER_ID");
					this.OnMANAGER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STREET_ADDRESS", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string STREET_ADDRESS
		{
			get
			{
				return this._STREET_ADDRESS;
			}
			set
			{
				if ((this._STREET_ADDRESS != value))
				{
					this.OnSTREET_ADDRESSChanging(value);
					this.SendPropertyChanging();
					this._STREET_ADDRESS = value;
					this.SendPropertyChanged("STREET_ADDRESS");
					this.OnSTREET_ADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CITY
		{
			get
			{
				return this._CITY;
			}
			set
			{
				if ((this._CITY != value))
				{
					this.OnCITYChanging(value);
					this.SendPropertyChanging();
					this._CITY = value;
					this.SendPropertyChanged("CITY");
					this.OnCITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZIPCODE", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string ZIPCODE
		{
			get
			{
				return this._ZIPCODE;
			}
			set
			{
				if ((this._ZIPCODE != value))
				{
					this.OnZIPCODEChanging(value);
					this.SendPropertyChanging();
					this._ZIPCODE = value;
					this.SendPropertyChanged("ZIPCODE");
					this.OnZIPCODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dealership_Cars_for_Sale", Storage="_Cars_for_Sales", ThisKey="DEALERSHIP_ID", OtherKey="DEALERSHIP_ID")]
		public EntitySet<Cars_for_Sale> Cars_for_Sales
		{
			get
			{
				return this._Cars_for_Sales;
			}
			set
			{
				this._Cars_for_Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dealership_Employee", Storage="_Employees", ThisKey="DEALERSHIP_ID", OtherKey="DEALERSHIP_ID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dealership_Sold_Car", Storage="_Sold_Cars", ThisKey="DEALERSHIP_ID", OtherKey="DEALERSHIP_ID")]
		public EntitySet<Sold_Car> Sold_Cars
		{
			get
			{
				return this._Sold_Cars;
			}
			set
			{
				this._Sold_Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Dealership", Storage="_Employee", ThisKey="MANAGER_ID", OtherKey="EMPLOYEE_ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Dealerships.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Dealerships.Add(this);
						this._MANAGER_ID = value.EMPLOYEE_ID;
					}
					else
					{
						this._MANAGER_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars_for_Sales(Cars_for_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dealership = this;
		}
		
		private void detach_Cars_for_Sales(Cars_for_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Dealership = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Dealership = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Dealership = null;
		}
		
		private void attach_Sold_Cars(Sold_Car entity)
		{
			this.SendPropertyChanging();
			entity.Dealership = this;
		}
		
		private void detach_Sold_Cars(Sold_Car entity)
		{
			this.SendPropertyChanging();
			entity.Dealership = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Discounts")]
	public partial class Discount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DISCOUNT_ID;
		
		private string _NAME;
		
		private decimal _VALUE;
		
		private EntitySet<Active_Discount> _Active_Discounts;
		
		private EntitySet<Sold_Discount> _Sold_Discounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDISCOUNT_IDChanging(int value);
    partial void OnDISCOUNT_IDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnVALUEChanging(decimal value);
    partial void OnVALUEChanged();
    #endregion
		
		public Discount()
		{
			this._Active_Discounts = new EntitySet<Active_Discount>(new Action<Active_Discount>(this.attach_Active_Discounts), new Action<Active_Discount>(this.detach_Active_Discounts));
			this._Sold_Discounts = new EntitySet<Sold_Discount>(new Action<Sold_Discount>(this.attach_Sold_Discounts), new Action<Sold_Discount>(this.detach_Sold_Discounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISCOUNT_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DISCOUNT_ID
		{
			get
			{
				return this._DISCOUNT_ID;
			}
			set
			{
				if ((this._DISCOUNT_ID != value))
				{
					this.OnDISCOUNT_IDChanging(value);
					this.SendPropertyChanging();
					this._DISCOUNT_ID = value;
					this.SendPropertyChanged("DISCOUNT_ID");
					this.OnDISCOUNT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VALUE", DbType="Decimal(10,2) NOT NULL")]
		public decimal VALUE
		{
			get
			{
				return this._VALUE;
			}
			set
			{
				if ((this._VALUE != value))
				{
					this.OnVALUEChanging(value);
					this.SendPropertyChanging();
					this._VALUE = value;
					this.SendPropertyChanged("VALUE");
					this.OnVALUEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_Active_Discount", Storage="_Active_Discounts", ThisKey="DISCOUNT_ID", OtherKey="DISCOUNT_ID")]
		public EntitySet<Active_Discount> Active_Discounts
		{
			get
			{
				return this._Active_Discounts;
			}
			set
			{
				this._Active_Discounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_Sold_Discount", Storage="_Sold_Discounts", ThisKey="DISCOUNT_ID", OtherKey="DISCOUNT_ID")]
		public EntitySet<Sold_Discount> Sold_Discounts
		{
			get
			{
				return this._Sold_Discounts;
			}
			set
			{
				this._Sold_Discounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Active_Discounts(Active_Discount entity)
		{
			this.SendPropertyChanging();
			entity.Discount = this;
		}
		
		private void detach_Active_Discounts(Active_Discount entity)
		{
			this.SendPropertyChanging();
			entity.Discount = null;
		}
		
		private void attach_Sold_Discounts(Sold_Discount entity)
		{
			this.SendPropertyChanging();
			entity.Discount = this;
		}
		
		private void detach_Sold_Discounts(Sold_Discount entity)
		{
			this.SendPropertyChanging();
			entity.Discount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Models")]
	public partial class Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MODEL_ID;
		
		private string _NAME;
		
		private decimal _BASE_PRICE;
		
		private EntitySet<Cars_for_Sale> _Cars_for_Sales;
		
		private EntitySet<Sold_Car> _Sold_Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMODEL_IDChanging(int value);
    partial void OnMODEL_IDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnBASE_PRICEChanging(decimal value);
    partial void OnBASE_PRICEChanged();
    #endregion
		
		public Model()
		{
			this._Cars_for_Sales = new EntitySet<Cars_for_Sale>(new Action<Cars_for_Sale>(this.attach_Cars_for_Sales), new Action<Cars_for_Sale>(this.detach_Cars_for_Sales));
			this._Sold_Cars = new EntitySet<Sold_Car>(new Action<Sold_Car>(this.attach_Sold_Cars), new Action<Sold_Car>(this.detach_Sold_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MODEL_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MODEL_ID
		{
			get
			{
				return this._MODEL_ID;
			}
			set
			{
				if ((this._MODEL_ID != value))
				{
					this.OnMODEL_IDChanging(value);
					this.SendPropertyChanging();
					this._MODEL_ID = value;
					this.SendPropertyChanged("MODEL_ID");
					this.OnMODEL_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BASE_PRICE", DbType="Decimal(10,2) NOT NULL")]
		public decimal BASE_PRICE
		{
			get
			{
				return this._BASE_PRICE;
			}
			set
			{
				if ((this._BASE_PRICE != value))
				{
					this.OnBASE_PRICEChanging(value);
					this.SendPropertyChanging();
					this._BASE_PRICE = value;
					this.SendPropertyChanged("BASE_PRICE");
					this.OnBASE_PRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Cars_for_Sale", Storage="_Cars_for_Sales", ThisKey="MODEL_ID", OtherKey="MODEL_ID")]
		public EntitySet<Cars_for_Sale> Cars_for_Sales
		{
			get
			{
				return this._Cars_for_Sales;
			}
			set
			{
				this._Cars_for_Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Sold_Car", Storage="_Sold_Cars", ThisKey="MODEL_ID", OtherKey="MODEL_ID")]
		public EntitySet<Sold_Car> Sold_Cars
		{
			get
			{
				return this._Sold_Cars;
			}
			set
			{
				this._Sold_Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars_for_Sales(Cars_for_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_Cars_for_Sales(Cars_for_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
		
		private void attach_Sold_Cars(Sold_Car entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_Sold_Cars(Sold_Car entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Order_Statuses")]
	public partial class Order_Statuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ORDER_STATUS_ID;
		
		private string _STATUS;
		
		private EntitySet<Active_Order> _Active_Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnORDER_STATUS_IDChanging(int value);
    partial void OnORDER_STATUS_IDChanged();
    partial void OnSTATUSChanging(string value);
    partial void OnSTATUSChanged();
    #endregion
		
		public Order_Statuse()
		{
			this._Active_Orders = new EntitySet<Active_Order>(new Action<Active_Order>(this.attach_Active_Orders), new Action<Active_Order>(this.detach_Active_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_STATUS_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ORDER_STATUS_ID
		{
			get
			{
				return this._ORDER_STATUS_ID;
			}
			set
			{
				if ((this._ORDER_STATUS_ID != value))
				{
					this.OnORDER_STATUS_IDChanging(value);
					this.SendPropertyChanging();
					this._ORDER_STATUS_ID = value;
					this.SendPropertyChanged("ORDER_STATUS_ID");
					this.OnORDER_STATUS_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATUS", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string STATUS
		{
			get
			{
				return this._STATUS;
			}
			set
			{
				if ((this._STATUS != value))
				{
					this.OnSTATUSChanging(value);
					this.SendPropertyChanging();
					this._STATUS = value;
					this.SendPropertyChanged("STATUS");
					this.OnSTATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Statuse_Active_Order", Storage="_Active_Orders", ThisKey="ORDER_STATUS_ID", OtherKey="ORDER_STATUS_ID")]
		public EntitySet<Active_Order> Active_Orders
		{
			get
			{
				return this._Active_Orders;
			}
			set
			{
				this._Active_Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Active_Orders(Active_Order entity)
		{
			this.SendPropertyChanging();
			entity.Order_Statuse = this;
		}
		
		private void detach_Active_Orders(Active_Order entity)
		{
			this.SendPropertyChanging();
			entity.Order_Statuse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sold_Accessories")]
	public partial class Sold_Accessory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SALE_ID;
		
		private int _ACCESSORY_ID;
		
		private EntityRef<Accessory> _Accessory;
		
		private EntityRef<Sold_Car> _Sold_Car;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSALE_IDChanging(int value);
    partial void OnSALE_IDChanged();
    partial void OnACCESSORY_IDChanging(int value);
    partial void OnACCESSORY_IDChanged();
    #endregion
		
		public Sold_Accessory()
		{
			this._Accessory = default(EntityRef<Accessory>);
			this._Sold_Car = default(EntityRef<Sold_Car>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SALE_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SALE_ID
		{
			get
			{
				return this._SALE_ID;
			}
			set
			{
				if ((this._SALE_ID != value))
				{
					if (this._Sold_Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSALE_IDChanging(value);
					this.SendPropertyChanging();
					this._SALE_ID = value;
					this.SendPropertyChanged("SALE_ID");
					this.OnSALE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCESSORY_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ACCESSORY_ID
		{
			get
			{
				return this._ACCESSORY_ID;
			}
			set
			{
				if ((this._ACCESSORY_ID != value))
				{
					if (this._Accessory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACCESSORY_IDChanging(value);
					this.SendPropertyChanging();
					this._ACCESSORY_ID = value;
					this.SendPropertyChanged("ACCESSORY_ID");
					this.OnACCESSORY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accessory_Sold_Accessory", Storage="_Accessory", ThisKey="ACCESSORY_ID", OtherKey="ACCESSORY_ID", IsForeignKey=true)]
		public Accessory Accessory
		{
			get
			{
				return this._Accessory.Entity;
			}
			set
			{
				Accessory previousValue = this._Accessory.Entity;
				if (((previousValue != value) 
							|| (this._Accessory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Accessory.Entity = null;
						previousValue.Sold_Accessories.Remove(this);
					}
					this._Accessory.Entity = value;
					if ((value != null))
					{
						value.Sold_Accessories.Add(this);
						this._ACCESSORY_ID = value.ACCESSORY_ID;
					}
					else
					{
						this._ACCESSORY_ID = default(int);
					}
					this.SendPropertyChanged("Accessory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sold_Car_Sold_Accessory", Storage="_Sold_Car", ThisKey="SALE_ID", OtherKey="SALE_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Sold_Car Sold_Car
		{
			get
			{
				return this._Sold_Car.Entity;
			}
			set
			{
				Sold_Car previousValue = this._Sold_Car.Entity;
				if (((previousValue != value) 
							|| (this._Sold_Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sold_Car.Entity = null;
						previousValue.Sold_Accessories.Remove(this);
					}
					this._Sold_Car.Entity = value;
					if ((value != null))
					{
						value.Sold_Accessories.Add(this);
						this._SALE_ID = value.SALE_ID;
					}
					else
					{
						this._SALE_ID = default(int);
					}
					this.SendPropertyChanged("Sold_Car");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sold_Discounts")]
	public partial class Sold_Discount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SALE_ID;
		
		private int _DISCOUNT_ID;
		
		private EntityRef<Discount> _Discount;
		
		private EntityRef<Sold_Car> _Sold_Car;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSALE_IDChanging(int value);
    partial void OnSALE_IDChanged();
    partial void OnDISCOUNT_IDChanging(int value);
    partial void OnDISCOUNT_IDChanged();
    #endregion
		
		public Sold_Discount()
		{
			this._Discount = default(EntityRef<Discount>);
			this._Sold_Car = default(EntityRef<Sold_Car>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SALE_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SALE_ID
		{
			get
			{
				return this._SALE_ID;
			}
			set
			{
				if ((this._SALE_ID != value))
				{
					if (this._Sold_Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSALE_IDChanging(value);
					this.SendPropertyChanging();
					this._SALE_ID = value;
					this.SendPropertyChanged("SALE_ID");
					this.OnSALE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DISCOUNT_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DISCOUNT_ID
		{
			get
			{
				return this._DISCOUNT_ID;
			}
			set
			{
				if ((this._DISCOUNT_ID != value))
				{
					if (this._Discount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDISCOUNT_IDChanging(value);
					this.SendPropertyChanging();
					this._DISCOUNT_ID = value;
					this.SendPropertyChanged("DISCOUNT_ID");
					this.OnDISCOUNT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discount_Sold_Discount", Storage="_Discount", ThisKey="DISCOUNT_ID", OtherKey="DISCOUNT_ID", IsForeignKey=true)]
		public Discount Discount
		{
			get
			{
				return this._Discount.Entity;
			}
			set
			{
				Discount previousValue = this._Discount.Entity;
				if (((previousValue != value) 
							|| (this._Discount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discount.Entity = null;
						previousValue.Sold_Discounts.Remove(this);
					}
					this._Discount.Entity = value;
					if ((value != null))
					{
						value.Sold_Discounts.Add(this);
						this._DISCOUNT_ID = value.DISCOUNT_ID;
					}
					else
					{
						this._DISCOUNT_ID = default(int);
					}
					this.SendPropertyChanged("Discount");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sold_Car_Sold_Discount", Storage="_Sold_Car", ThisKey="SALE_ID", OtherKey="SALE_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Sold_Car Sold_Car
		{
			get
			{
				return this._Sold_Car.Entity;
			}
			set
			{
				Sold_Car previousValue = this._Sold_Car.Entity;
				if (((previousValue != value) 
							|| (this._Sold_Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sold_Car.Entity = null;
						previousValue.Sold_Discounts.Remove(this);
					}
					this._Sold_Car.Entity = value;
					if ((value != null))
					{
						value.Sold_Discounts.Add(this);
						this._SALE_ID = value.SALE_ID;
					}
					else
					{
						this._SALE_ID = default(int);
					}
					this.SendPropertyChanged("Sold_Car");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ROLE_ID;
		
		private string _ROLE_NAME;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnROLE_IDChanging(int value);
    partial void OnROLE_IDChanged();
    partial void OnROLE_NAMEChanging(string value);
    partial void OnROLE_NAMEChanged();
    #endregion
		
		public Role()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROLE_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ROLE_ID
		{
			get
			{
				return this._ROLE_ID;
			}
			set
			{
				if ((this._ROLE_ID != value))
				{
					this.OnROLE_IDChanging(value);
					this.SendPropertyChanging();
					this._ROLE_ID = value;
					this.SendPropertyChanged("ROLE_ID");
					this.OnROLE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROLE_NAME", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ROLE_NAME
		{
			get
			{
				return this._ROLE_NAME;
			}
			set
			{
				if ((this._ROLE_NAME != value))
				{
					this.OnROLE_NAMEChanging(value);
					this.SendPropertyChanging();
					this._ROLE_NAME = value;
					this.SendPropertyChanged("ROLE_NAME");
					this.OnROLE_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Employee", Storage="_Employees", ThisKey="ROLE_ID", OtherKey="ROLE_ID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EMPLOYEE_ID;
		
		private string _NAME;
		
		private string _SURNAME;
		
		private System.Nullable<int> _DEALERSHIP_ID;
		
		private int _ROLE_ID;
		
		private string _LOGIN;
		
		private string _PASSWORD;
		
		private EntitySet<Active_Order> _Active_Orders;
		
		private EntitySet<Dealership> _Dealerships;
		
		private EntitySet<Sold_Car> _Sold_Cars;
		
		private EntityRef<Dealership> _Dealership;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMPLOYEE_IDChanging(int value);
    partial void OnEMPLOYEE_IDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnSURNAMEChanging(string value);
    partial void OnSURNAMEChanged();
    partial void OnDEALERSHIP_IDChanging(System.Nullable<int> value);
    partial void OnDEALERSHIP_IDChanged();
    partial void OnROLE_IDChanging(int value);
    partial void OnROLE_IDChanged();
    partial void OnLOGINChanging(string value);
    partial void OnLOGINChanged();
    partial void OnPASSWORDChanging(string value);
    partial void OnPASSWORDChanged();
    #endregion
		
		public Employee()
		{
			this._Active_Orders = new EntitySet<Active_Order>(new Action<Active_Order>(this.attach_Active_Orders), new Action<Active_Order>(this.detach_Active_Orders));
			this._Dealerships = new EntitySet<Dealership>(new Action<Dealership>(this.attach_Dealerships), new Action<Dealership>(this.detach_Dealerships));
			this._Sold_Cars = new EntitySet<Sold_Car>(new Action<Sold_Car>(this.attach_Sold_Cars), new Action<Sold_Car>(this.detach_Sold_Cars));
			this._Dealership = default(EntityRef<Dealership>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEE_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EMPLOYEE_ID
		{
			get
			{
				return this._EMPLOYEE_ID;
			}
			set
			{
				if ((this._EMPLOYEE_ID != value))
				{
					this.OnEMPLOYEE_IDChanging(value);
					this.SendPropertyChanging();
					this._EMPLOYEE_ID = value;
					this.SendPropertyChanged("EMPLOYEE_ID");
					this.OnEMPLOYEE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SURNAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SURNAME
		{
			get
			{
				return this._SURNAME;
			}
			set
			{
				if ((this._SURNAME != value))
				{
					this.OnSURNAMEChanging(value);
					this.SendPropertyChanging();
					this._SURNAME = value;
					this.SendPropertyChanged("SURNAME");
					this.OnSURNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEALERSHIP_ID", DbType="Int")]
		public System.Nullable<int> DEALERSHIP_ID
		{
			get
			{
				return this._DEALERSHIP_ID;
			}
			set
			{
				if ((this._DEALERSHIP_ID != value))
				{
					if (this._Dealership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDEALERSHIP_IDChanging(value);
					this.SendPropertyChanging();
					this._DEALERSHIP_ID = value;
					this.SendPropertyChanged("DEALERSHIP_ID");
					this.OnDEALERSHIP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROLE_ID", DbType="Int NOT NULL")]
		public int ROLE_ID
		{
			get
			{
				return this._ROLE_ID;
			}
			set
			{
				if ((this._ROLE_ID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnROLE_IDChanging(value);
					this.SendPropertyChanging();
					this._ROLE_ID = value;
					this.SendPropertyChanged("ROLE_ID");
					this.OnROLE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOGIN", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LOGIN
		{
			get
			{
				return this._LOGIN;
			}
			set
			{
				if ((this._LOGIN != value))
				{
					this.OnLOGINChanging(value);
					this.SendPropertyChanging();
					this._LOGIN = value;
					this.SendPropertyChanged("LOGIN");
					this.OnLOGINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSWORD", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string PASSWORD
		{
			get
			{
				return this._PASSWORD;
			}
			set
			{
				if ((this._PASSWORD != value))
				{
					this.OnPASSWORDChanging(value);
					this.SendPropertyChanging();
					this._PASSWORD = value;
					this.SendPropertyChanged("PASSWORD");
					this.OnPASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Active_Order", Storage="_Active_Orders", ThisKey="EMPLOYEE_ID", OtherKey="EMPLOYEE_ID")]
		public EntitySet<Active_Order> Active_Orders
		{
			get
			{
				return this._Active_Orders;
			}
			set
			{
				this._Active_Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Dealership", Storage="_Dealerships", ThisKey="EMPLOYEE_ID", OtherKey="MANAGER_ID")]
		public EntitySet<Dealership> Dealerships
		{
			get
			{
				return this._Dealerships;
			}
			set
			{
				this._Dealerships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Sold_Car", Storage="_Sold_Cars", ThisKey="EMPLOYEE_ID", OtherKey="EMPLOYEE_ID")]
		public EntitySet<Sold_Car> Sold_Cars
		{
			get
			{
				return this._Sold_Cars;
			}
			set
			{
				this._Sold_Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dealership_Employee", Storage="_Dealership", ThisKey="DEALERSHIP_ID", OtherKey="DEALERSHIP_ID", IsForeignKey=true)]
		public Dealership Dealership
		{
			get
			{
				return this._Dealership.Entity;
			}
			set
			{
				Dealership previousValue = this._Dealership.Entity;
				if (((previousValue != value) 
							|| (this._Dealership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dealership.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Dealership.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DEALERSHIP_ID = value.DEALERSHIP_ID;
					}
					else
					{
						this._DEALERSHIP_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dealership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Employee", Storage="_Role", ThisKey="ROLE_ID", OtherKey="ROLE_ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._ROLE_ID = value.ROLE_ID;
					}
					else
					{
						this._ROLE_ID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Active_Orders(Active_Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Active_Orders(Active_Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Dealerships(Dealership entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Dealerships(Dealership entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Sold_Cars(Sold_Car entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Sold_Cars(Sold_Car entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mounted_Accessories")]
	public partial class Mounted_Accessory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ACCESSORY_ID;
		
		private string _CAR_VIN;
		
		private EntityRef<Accessory> _Accessory;
		
		private EntityRef<Cars_for_Sale> _Cars_for_Sale;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACCESSORY_IDChanging(int value);
    partial void OnACCESSORY_IDChanged();
    partial void OnCAR_VINChanging(string value);
    partial void OnCAR_VINChanged();
    #endregion
		
		public Mounted_Accessory()
		{
			this._Accessory = default(EntityRef<Accessory>);
			this._Cars_for_Sale = default(EntityRef<Cars_for_Sale>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACCESSORY_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ACCESSORY_ID
		{
			get
			{
				return this._ACCESSORY_ID;
			}
			set
			{
				if ((this._ACCESSORY_ID != value))
				{
					if (this._Accessory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACCESSORY_IDChanging(value);
					this.SendPropertyChanging();
					this._ACCESSORY_ID = value;
					this.SendPropertyChanged("ACCESSORY_ID");
					this.OnACCESSORY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAR_VIN", DbType="Char(17) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CAR_VIN
		{
			get
			{
				return this._CAR_VIN;
			}
			set
			{
				if ((this._CAR_VIN != value))
				{
					if (this._Cars_for_Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCAR_VINChanging(value);
					this.SendPropertyChanging();
					this._CAR_VIN = value;
					this.SendPropertyChanged("CAR_VIN");
					this.OnCAR_VINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accessory_Mounted_Accessory", Storage="_Accessory", ThisKey="ACCESSORY_ID", OtherKey="ACCESSORY_ID", IsForeignKey=true)]
		public Accessory Accessory
		{
			get
			{
				return this._Accessory.Entity;
			}
			set
			{
				Accessory previousValue = this._Accessory.Entity;
				if (((previousValue != value) 
							|| (this._Accessory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Accessory.Entity = null;
						previousValue.Mounted_Accessories.Remove(this);
					}
					this._Accessory.Entity = value;
					if ((value != null))
					{
						value.Mounted_Accessories.Add(this);
						this._ACCESSORY_ID = value.ACCESSORY_ID;
					}
					else
					{
						this._ACCESSORY_ID = default(int);
					}
					this.SendPropertyChanged("Accessory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cars_for_Sale_Mounted_Accessory", Storage="_Cars_for_Sale", ThisKey="CAR_VIN", OtherKey="CAR_VIN", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Cars_for_Sale Cars_for_Sale
		{
			get
			{
				return this._Cars_for_Sale.Entity;
			}
			set
			{
				Cars_for_Sale previousValue = this._Cars_for_Sale.Entity;
				if (((previousValue != value) 
							|| (this._Cars_for_Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cars_for_Sale.Entity = null;
						previousValue.Mounted_Accessories.Remove(this);
					}
					this._Cars_for_Sale.Entity = value;
					if ((value != null))
					{
						value.Mounted_Accessories.Add(this);
						this._CAR_VIN = value.CAR_VIN;
					}
					else
					{
						this._CAR_VIN = default(string);
					}
					this.SendPropertyChanged("Cars_for_Sale");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sold_Cars")]
	public partial class Sold_Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SALE_ID;
		
		private string _CAR_VIN;
		
		private int _MODEL_ID;
		
		private System.Nullable<int> _DEALERSHIP_ID;
		
		private int _COLOR_ID;
		
		private string _PRODUCTION_YEAR;
		
		private System.Nullable<int> _EMPLOYEE_ID;
		
		private int _CUSTOMER_ID;
		
		private System.DateTime _SALE_DATE;
		
		private EntitySet<Sold_Accessory> _Sold_Accessories;
		
		private EntitySet<Sold_Discount> _Sold_Discounts;
		
		private EntityRef<Color> _Color;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Dealership> _Dealership;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSALE_IDChanging(int value);
    partial void OnSALE_IDChanged();
    partial void OnCAR_VINChanging(string value);
    partial void OnCAR_VINChanged();
    partial void OnMODEL_IDChanging(int value);
    partial void OnMODEL_IDChanged();
    partial void OnDEALERSHIP_IDChanging(System.Nullable<int> value);
    partial void OnDEALERSHIP_IDChanged();
    partial void OnCOLOR_IDChanging(int value);
    partial void OnCOLOR_IDChanged();
    partial void OnPRODUCTION_YEARChanging(string value);
    partial void OnPRODUCTION_YEARChanged();
    partial void OnEMPLOYEE_IDChanging(System.Nullable<int> value);
    partial void OnEMPLOYEE_IDChanged();
    partial void OnCUSTOMER_IDChanging(int value);
    partial void OnCUSTOMER_IDChanged();
    partial void OnSALE_DATEChanging(System.DateTime value);
    partial void OnSALE_DATEChanged();
    #endregion
		
		public Sold_Car()
		{
			this._Sold_Accessories = new EntitySet<Sold_Accessory>(new Action<Sold_Accessory>(this.attach_Sold_Accessories), new Action<Sold_Accessory>(this.detach_Sold_Accessories));
			this._Sold_Discounts = new EntitySet<Sold_Discount>(new Action<Sold_Discount>(this.attach_Sold_Discounts), new Action<Sold_Discount>(this.detach_Sold_Discounts));
			this._Color = default(EntityRef<Color>);
			this._Customer = default(EntityRef<Customer>);
			this._Dealership = default(EntityRef<Dealership>);
			this._Employee = default(EntityRef<Employee>);
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SALE_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SALE_ID
		{
			get
			{
				return this._SALE_ID;
			}
			set
			{
				if ((this._SALE_ID != value))
				{
					this.OnSALE_IDChanging(value);
					this.SendPropertyChanging();
					this._SALE_ID = value;
					this.SendPropertyChanged("SALE_ID");
					this.OnSALE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAR_VIN", DbType="Char(17) NOT NULL", CanBeNull=false)]
		public string CAR_VIN
		{
			get
			{
				return this._CAR_VIN;
			}
			set
			{
				if ((this._CAR_VIN != value))
				{
					this.OnCAR_VINChanging(value);
					this.SendPropertyChanging();
					this._CAR_VIN = value;
					this.SendPropertyChanged("CAR_VIN");
					this.OnCAR_VINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MODEL_ID", DbType="Int NOT NULL")]
		public int MODEL_ID
		{
			get
			{
				return this._MODEL_ID;
			}
			set
			{
				if ((this._MODEL_ID != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMODEL_IDChanging(value);
					this.SendPropertyChanging();
					this._MODEL_ID = value;
					this.SendPropertyChanged("MODEL_ID");
					this.OnMODEL_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEALERSHIP_ID", DbType="Int")]
		public System.Nullable<int> DEALERSHIP_ID
		{
			get
			{
				return this._DEALERSHIP_ID;
			}
			set
			{
				if ((this._DEALERSHIP_ID != value))
				{
					if (this._Dealership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDEALERSHIP_IDChanging(value);
					this.SendPropertyChanging();
					this._DEALERSHIP_ID = value;
					this.SendPropertyChanged("DEALERSHIP_ID");
					this.OnDEALERSHIP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COLOR_ID", DbType="Int NOT NULL")]
		public int COLOR_ID
		{
			get
			{
				return this._COLOR_ID;
			}
			set
			{
				if ((this._COLOR_ID != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOLOR_IDChanging(value);
					this.SendPropertyChanging();
					this._COLOR_ID = value;
					this.SendPropertyChanged("COLOR_ID");
					this.OnCOLOR_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRODUCTION_YEAR", DbType="Char(4) NOT NULL", CanBeNull=false)]
		public string PRODUCTION_YEAR
		{
			get
			{
				return this._PRODUCTION_YEAR;
			}
			set
			{
				if ((this._PRODUCTION_YEAR != value))
				{
					this.OnPRODUCTION_YEARChanging(value);
					this.SendPropertyChanging();
					this._PRODUCTION_YEAR = value;
					this.SendPropertyChanged("PRODUCTION_YEAR");
					this.OnPRODUCTION_YEARChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPLOYEE_ID", DbType="Int")]
		public System.Nullable<int> EMPLOYEE_ID
		{
			get
			{
				return this._EMPLOYEE_ID;
			}
			set
			{
				if ((this._EMPLOYEE_ID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMPLOYEE_IDChanging(value);
					this.SendPropertyChanging();
					this._EMPLOYEE_ID = value;
					this.SendPropertyChanged("EMPLOYEE_ID");
					this.OnEMPLOYEE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CUSTOMER_ID", DbType="Int NOT NULL")]
		public int CUSTOMER_ID
		{
			get
			{
				return this._CUSTOMER_ID;
			}
			set
			{
				if ((this._CUSTOMER_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCUSTOMER_IDChanging(value);
					this.SendPropertyChanging();
					this._CUSTOMER_ID = value;
					this.SendPropertyChanged("CUSTOMER_ID");
					this.OnCUSTOMER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SALE_DATE", DbType="Date NOT NULL")]
		public System.DateTime SALE_DATE
		{
			get
			{
				return this._SALE_DATE;
			}
			set
			{
				if ((this._SALE_DATE != value))
				{
					this.OnSALE_DATEChanging(value);
					this.SendPropertyChanging();
					this._SALE_DATE = value;
					this.SendPropertyChanged("SALE_DATE");
					this.OnSALE_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sold_Car_Sold_Accessory", Storage="_Sold_Accessories", ThisKey="SALE_ID", OtherKey="SALE_ID")]
		public EntitySet<Sold_Accessory> Sold_Accessories
		{
			get
			{
				return this._Sold_Accessories;
			}
			set
			{
				this._Sold_Accessories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sold_Car_Sold_Discount", Storage="_Sold_Discounts", ThisKey="SALE_ID", OtherKey="SALE_ID")]
		public EntitySet<Sold_Discount> Sold_Discounts
		{
			get
			{
				return this._Sold_Discounts;
			}
			set
			{
				this._Sold_Discounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Sold_Car", Storage="_Color", ThisKey="COLOR_ID", OtherKey="COLOR_ID", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.Sold_Cars.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.Sold_Cars.Add(this);
						this._COLOR_ID = value.COLOR_ID;
					}
					else
					{
						this._COLOR_ID = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sold_Car", Storage="_Customer", ThisKey="CUSTOMER_ID", OtherKey="CUSTOMER_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Sold_Cars.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Sold_Cars.Add(this);
						this._CUSTOMER_ID = value.CUSTOMER_ID;
					}
					else
					{
						this._CUSTOMER_ID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dealership_Sold_Car", Storage="_Dealership", ThisKey="DEALERSHIP_ID", OtherKey="DEALERSHIP_ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Dealership Dealership
		{
			get
			{
				return this._Dealership.Entity;
			}
			set
			{
				Dealership previousValue = this._Dealership.Entity;
				if (((previousValue != value) 
							|| (this._Dealership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dealership.Entity = null;
						previousValue.Sold_Cars.Remove(this);
					}
					this._Dealership.Entity = value;
					if ((value != null))
					{
						value.Sold_Cars.Add(this);
						this._DEALERSHIP_ID = value.DEALERSHIP_ID;
					}
					else
					{
						this._DEALERSHIP_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Dealership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Sold_Car", Storage="_Employee", ThisKey="EMPLOYEE_ID", OtherKey="EMPLOYEE_ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Sold_Cars.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Sold_Cars.Add(this);
						this._EMPLOYEE_ID = value.EMPLOYEE_ID;
					}
					else
					{
						this._EMPLOYEE_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Sold_Car", Storage="_Model", ThisKey="MODEL_ID", OtherKey="MODEL_ID", IsForeignKey=true)]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.Sold_Cars.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.Sold_Cars.Add(this);
						this._MODEL_ID = value.MODEL_ID;
					}
					else
					{
						this._MODEL_ID = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sold_Accessories(Sold_Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Sold_Car = this;
		}
		
		private void detach_Sold_Accessories(Sold_Accessory entity)
		{
			this.SendPropertyChanging();
			entity.Sold_Car = null;
		}
		
		private void attach_Sold_Discounts(Sold_Discount entity)
		{
			this.SendPropertyChanging();
			entity.Sold_Car = this;
		}
		
		private void detach_Sold_Discounts(Sold_Discount entity)
		{
			this.SendPropertyChanging();
			entity.Sold_Car = null;
		}
	}
}
#pragma warning restore 1591
